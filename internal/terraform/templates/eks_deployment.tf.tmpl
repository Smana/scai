terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "~> 2.23"
    }
  }
}

provider "aws" {
  region = "{{ .Region }}"
}

# Use existing EKS cluster or create minimal one
data "aws_eks_cluster" "existing" {
  count = {{ if .UseExistingCluster }}1{{ else }}0{{ end }}
  name  = "{{ .ClusterName }}"
}

data "aws_eks_cluster_auth" "existing" {
  count = {{ if .UseExistingCluster }}1{{ else }}0{{ end }}
  name  = "{{ .ClusterName }}"
}

{{ if not .UseExistingCluster }}
# VPC for EKS cluster
resource "aws_vpc" "eks" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name = "{{ .AppName }}-eks-vpc"
  }
}

resource "aws_subnet" "eks_public" {
  count                   = 2
  vpc_id                  = aws_vpc.eks.id
  cidr_block              = "10.0.${count.index}.0/24"
  availability_zone       = data.aws_availability_zones.available.names[count.index]
  map_public_ip_on_launch = true

  tags = {
    Name                                        = "{{ .AppName }}-eks-public-${count.index}"
    "kubernetes.io/role/elb"                    = "1"
    "kubernetes.io/cluster/{{ .AppName }}-eks"  = "shared"
  }
}

resource "aws_internet_gateway" "eks" {
  vpc_id = aws_vpc.eks.id

  tags = {
    Name = "{{ .AppName }}-eks-igw"
  }
}

resource "aws_route_table" "eks_public" {
  vpc_id = aws_vpc.eks.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.eks.id
  }

  tags = {
    Name = "{{ .AppName }}-eks-public-rt"
  }
}

resource "aws_route_table_association" "eks_public" {
  count          = 2
  subnet_id      = aws_subnet.eks_public[count.index].id
  route_table_id = aws_route_table.eks_public.id
}

data "aws_availability_zones" "available" {
  state = "available"
}

# IAM Role for EKS Cluster
resource "aws_iam_role" "eks_cluster" {
  name = "{{ .AppName }}-eks-cluster-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "eks.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks_cluster.name
}

# IAM Role for EKS Node Group
resource "aws_iam_role" "eks_nodes" {
  name = "{{ .AppName }}-eks-node-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "ec2.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "eks_worker_node_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_role.eks_nodes.name
}

resource "aws_iam_role_policy_attachment" "eks_cni_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
  role       = aws_iam_role.eks_nodes.name
}

resource "aws_iam_role_policy_attachment" "eks_container_registry_policy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
  role       = aws_iam_role.eks_nodes.name
}

# EKS Cluster
resource "aws_eks_cluster" "main" {
  name     = "{{ .AppName }}-eks"
  role_arn = aws_iam_role.eks_cluster.arn
  version  = "1.28"

  vpc_config {
    subnet_ids = aws_subnet.eks_public[*].id
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster_policy
  ]
}

# EKS Node Group
resource "aws_eks_node_group" "main" {
  cluster_name    = aws_eks_cluster.main.name
  node_group_name = "{{ .AppName }}-node-group"
  node_role_arn   = aws_iam_role.eks_nodes.arn
  subnet_ids      = aws_subnet.eks_public[*].id

  scaling_config {
    desired_size = {{ .NodeCount }}
    max_size     = {{ .MaxNodeCount }}
    min_size     = 1
  }

  instance_types = ["{{ .InstanceType }}"]

  depends_on = [
    aws_iam_role_policy_attachment.eks_worker_node_policy,
    aws_iam_role_policy_attachment.eks_cni_policy,
    aws_iam_role_policy_attachment.eks_container_registry_policy,
  ]
}
{{ end }}

# Configure Kubernetes provider
provider "kubernetes" {
  host                   = {{ if .UseExistingCluster }}data.aws_eks_cluster.existing[0].endpoint{{ else }}aws_eks_cluster.main.endpoint{{ end }}
  cluster_ca_certificate = base64decode({{ if .UseExistingCluster }}data.aws_eks_cluster.existing[0].certificate_authority[0].data{{ else }}aws_eks_cluster.main.certificate_authority[0].data{{ end }})
  token                  = {{ if .UseExistingCluster }}data.aws_eks_cluster_auth.existing[0].token{{ else }}data.aws_eks_cluster_auth.main.token{{ end }}
}

{{ if not .UseExistingCluster }}
data "aws_eks_cluster_auth" "main" {
  name = aws_eks_cluster.main.name
}
{{ end }}

# Namespace
resource "kubernetes_namespace" "app" {
  metadata {
    name = "{{ .Namespace }}"
  }
}

# ConfigMap with application code (for small apps)
resource "kubernetes_config_map" "app_code" {
  metadata {
    name      = "{{ .AppName }}-code"
    namespace = kubernetes_namespace.app.metadata[0].name
  }

  data = {
    "repo_url"      = "{{ .RepoURL }}"
    "start_command" = "{{ .StartCommand }}"
    "port"          = "{{ .AppPort }}"
  }
}

# Deployment
resource "kubernetes_deployment" "app" {
  metadata {
    name      = "{{ .AppName }}"
    namespace = kubernetes_namespace.app.metadata[0].name
    labels = {
      app = "{{ .AppName }}"
    }
  }

  spec {
    replicas = {{ .Replicas }}

    selector {
      match_labels = {
        app = "{{ .AppName }}"
      }
    }

    template {
      metadata {
        labels = {
          app = "{{ .AppName }}"
        }
      }

      spec {
        init_container {
          name  = "git-clone"
          image = "alpine/git:latest"

          command = [
            "sh",
            "-c",
            "git clone {{ .RepoURL }} /app {{ if .AppSubdir }}&& cd /app/{{ .AppSubdir }}{{ end }}"
          ]

          volume_mount {
            name       = "app-code"
            mount_path = "/app"
          }
        }

        container {
          name  = "app"
          image = "{{ .ContainerImage }}"

          command = ["sh", "-c"]
          args = [
            <<-EOT
            cd /app{{ if .AppSubdir }}/{{ .AppSubdir }}{{ end }} && \
            {{ if eq .Language "python" }}pip install -r requirements.txt && {{ end }}
            {{ if eq .Language "javascript" }}npm install && {{ end }}
            {{ .StartCommand }}
            EOT
          ]

          port {
            container_port = {{ .AppPort }}
            protocol       = "TCP"
          }

          {{ range $key, $value := .EnvVars }}
          env {
            name  = "{{ $key }}"
            value = "{{ $value }}"
          }
          {{ end }}

          resources {
            requests = {
              cpu    = "{{ .CPURequest }}"
              memory = "{{ .MemoryRequest }}"
            }
            limits = {
              cpu    = "{{ .CPULimit }}"
              memory = "{{ .MemoryLimit }}"
            }
          }

          liveness_probe {
            http_get {
              path = "{{ .HealthPath }}"
              port = {{ .AppPort }}
            }
            initial_delay_seconds = 30
            period_seconds        = 10
          }

          readiness_probe {
            http_get {
              path = "{{ .HealthPath }}"
              port = {{ .AppPort }}
            }
            initial_delay_seconds = 10
            period_seconds        = 5
          }

          volume_mount {
            name       = "app-code"
            mount_path = "/app"
          }
        }

        volume {
          name = "app-code"
          empty_dir {}
        }
      }
    }
  }
}

# Service
resource "kubernetes_service" "app" {
  metadata {
    name      = "{{ .AppName }}"
    namespace = kubernetes_namespace.app.metadata[0].name
  }

  spec {
    selector = {
      app = "{{ .AppName }}"
    }

    port {
      port        = {{ .AppPort }}
      target_port = {{ .AppPort }}
      protocol    = "TCP"
    }

    type = "LoadBalancer"
  }
}

# Outputs
output "cluster_endpoint" {
  value = {{ if .UseExistingCluster }}data.aws_eks_cluster.existing[0].endpoint{{ else }}aws_eks_cluster.main.endpoint{{ end }}
}

output "cluster_name" {
  value = {{ if .UseExistingCluster }}"{{ .ClusterName }}"{{ else }}aws_eks_cluster.main.name{{ end }}
}

output "namespace" {
  value = kubernetes_namespace.app.metadata[0].name
}

output "service_name" {
  value = kubernetes_service.app.metadata[0].name
}

output "load_balancer_hostname" {
  value = try(kubernetes_service.app.status[0].load_balancer[0].ingress[0].hostname, "pending")
}

output "public_url" {
  value = "http://${try(kubernetes_service.app.status[0].load_balancer[0].ingress[0].hostname, "pending")}:{{ .AppPort }}"
}
