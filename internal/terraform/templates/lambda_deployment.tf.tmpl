terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
    archive = {
      source  = "hashicorp/archive"
      version = "~> 2.4"
    }
  }
}

provider "aws" {
  region = "{{ .Region }}"
}

# IAM Role for Lambda
resource "aws_iam_role" "lambda" {
  name = "{{ .AppName }}-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

# Attach basic Lambda execution policy
resource "aws_iam_role_policy_attachment" "lambda_basic" {
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  role       = aws_iam_role.lambda.arn
}

# S3 Bucket for deployment package
resource "aws_s3_bucket" "lambda_code" {
  bucket = "{{ .AppName }}-lambda-code-${data.aws_caller_identity.current.account_id}"

  tags = {
    Name = "{{ .AppName }}-lambda-code"
  }
}

data "aws_caller_identity" "current" {}

# Download and package application code
resource "null_resource" "package_lambda" {
  provisioner "local-exec" {
    command = <<-EOT
      #!/bin/bash
      set -e

      # Create temp directory
      TMPDIR=$(mktemp -d)
      cd $TMPDIR

      # Clone repository
      git clone {{ .RepoURL }} app
      cd app
      {{ if .AppSubdir }}cd {{ .AppSubdir }}{{ end }}

      # Install dependencies
      {{ if eq .Language "python" }}
      # Python Lambda handler
      pip install -r requirements.txt -t .

      # Create Lambda handler wrapper
      cat > lambda_handler.py << 'HANDLER'
import os
os.environ['IS_LAMBDA'] = 'true'

# Import the app
{{ if .HasMainApp }}
from {{ .MainModule }} import app
{{ else }}
import {{ .MainModule }}
app = {{ .MainModule }}.app
{{ end }}

# AWS Lambda handler
def handler(event, context):
    from mangum import Mangum
    handler = Mangum(app)
    return handler(event, context)
HANDLER

      # Install mangum for ASGI/WSGI â†’ Lambda adapter
      pip install mangum -t .
      {{ end }}

      {{ if eq .Language "javascript" }}
      # Node.js Lambda handler
      npm install

      # Create Lambda handler wrapper
      cat > lambda_handler.js << 'HANDLER'
const serverless = require('serverless-http');
const app = require('./{{ .MainModule }}');

module.exports.handler = serverless(app);
HANDLER

      # Install serverless-http
      npm install serverless-http
      {{ end }}

      # Package everything
      zip -r /tmp/lambda_package.zip . -x "*.git*" "*node_modules/.cache*"

      echo "Lambda package created: /tmp/lambda_package.zip"
    EOT
  }

  triggers = {
    repo_url = "{{ .RepoURL }}"
    timestamp = timestamp()
  }
}

# Upload package to S3
resource "aws_s3_object" "lambda_package" {
  bucket = aws_s3_bucket.lambda_code.id
  key    = "{{ .AppName }}/lambda_package.zip"
  source = "/tmp/lambda_package.zip"

  etag = filemd5("/tmp/lambda_package.zip")

  depends_on = [null_resource.package_lambda]
}

# Lambda Function
resource "aws_lambda_function" "app" {
  function_name = "{{ .AppName }}"
  role          = aws_iam_role.lambda.arn

  s3_bucket = aws_s3_bucket.lambda_code.id
  s3_key    = aws_s3_object.lambda_package.key

  handler = {{ if eq .Language "python" }}"lambda_handler.handler"{{ else }}"lambda_handler.handler"{{ end }}
  runtime = "{{ .Runtime }}"

  timeout     = {{ .Timeout }}
  memory_size = {{ .MemorySize }}

  {{ range $key, $value := .EnvVars }}
  environment {
    variables = {
      {{ $key }} = "{{ $value }}"
    }
  }
  {{ end }}

  depends_on = [
    aws_s3_object.lambda_package,
    aws_iam_role_policy_attachment.lambda_basic
  ]
}

# CloudWatch Log Group
resource "aws_cloudwatch_log_group" "lambda" {
  name              = "/aws/lambda/{{ .AppName }}"
  retention_in_days = 7
}

# API Gateway REST API
resource "aws_apigatewayv2_api" "lambda" {
  name          = "{{ .AppName }}-api"
  protocol_type = "HTTP"
}

# API Gateway Stage
resource "aws_apigatewayv2_stage" "lambda" {
  api_id      = aws_apigatewayv2_api.lambda.id
  name        = "$default"
  auto_deploy = true

  access_log_settings {
    destination_arn = aws_cloudwatch_log_group.api_gateway.arn
    format = jsonencode({
      requestId      = "$context.requestId"
      ip             = "$context.identity.sourceIp"
      requestTime    = "$context.requestTime"
      httpMethod     = "$context.httpMethod"
      routeKey       = "$context.routeKey"
      status         = "$context.status"
      protocol       = "$context.protocol"
      responseLength = "$context.responseLength"
    })
  }
}

resource "aws_cloudwatch_log_group" "api_gateway" {
  name              = "/aws/apigateway/{{ .AppName }}"
  retention_in_days = 7
}

# API Gateway Integration
resource "aws_apigatewayv2_integration" "lambda" {
  api_id = aws_apigatewayv2_api.lambda.id

  integration_uri    = aws_lambda_function.app.invoke_arn
  integration_type   = "AWS_PROXY"
  integration_method = "POST"
}

# API Gateway Route (catch-all)
resource "aws_apigatewayv2_route" "lambda" {
  api_id    = aws_apigatewayv2_api.lambda.id
  route_key = "$default"

  target = "integrations/${aws_apigatewayv2_integration.lambda.id}"
}

# Lambda Permission for API Gateway
resource "aws_lambda_permission" "api_gateway" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.app.function_name
  principal     = "apigateway.amazonaws.com"

  source_arn = "${aws_apigatewayv2_api.lambda.execution_arn}/*/*"
}

# Outputs
output "lambda_function_name" {
  value = aws_lambda_function.app.function_name
}

output "lambda_function_arn" {
  value = aws_lambda_function.app.arn
}

output "api_gateway_endpoint" {
  value = aws_apigatewayv2_api.lambda.api_endpoint
}

output "public_url" {
  value = aws_apigatewayv2_api.lambda.api_endpoint
}

output "invoke_url" {
  value = "${aws_apigatewayv2_api.lambda.api_endpoint}/"
}
