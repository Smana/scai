package backend

import (
	"fmt"
	"os"
	"path/filepath"
)

// BackendTFConfig represents the configuration for generating backend.tf
type BackendTFConfig struct {
	BucketName string
	Region     string
	Key        string
}

// GenerateBackendTF generates the backend.tf file content
func GenerateBackendTF(cfg BackendTFConfig) string {
	return fmt.Sprintf(`# Generated by SCIA init wizard
# This configures OpenTofu/Terraform to store state in S3 with native file locking
# See: https://opentofu.org/docs/language/settings/backends/s3/

terraform {
  backend "s3" {
    bucket  = "%s"
    key     = "%s"
    region  = "%s"
    encrypt = true

    # OpenTofu 1.10+ native S3 locking (no DynamoDB required)
    use_lockfile = true
  }
}
`, cfg.BucketName, cfg.Key, cfg.Region)
}

// WriteBackendTF writes the backend.tf file to the terraform directory
func WriteBackendTF(terraformDir string, cfg BackendTFConfig) (string, error) {
	content := GenerateBackendTF(cfg)
	backendFile := filepath.Join(terraformDir, "backend.tf")

	// Write the backend configuration to file
	if err := os.WriteFile(backendFile, []byte(content), 0o600); err != nil {
		return "", fmt.Errorf("failed to write backend.tf: %w", err)
	}

	return backendFile, nil
}

// BackendTFPath returns the path where backend.tf should be written
func BackendTFPath(terraformDir string) string {
	return filepath.Join(terraformDir, "backend.tf")
}
