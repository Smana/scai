version: '3'

# SCIA Task Runner Configuration
# Uses Dagger modules from Daggerverse for all build and CI tasks
# Dagger modules used:
#   - sagikazarmark/daggerverse/go: Comprehensive Go tooling (build, cache management)
#   - purpleclay/daggerverse/golang: Testing, linting, vulnerability scanning
#   - Smana/daggerverse/pre-commit-tf: OpenTofu/Terraform validation with pre-commit hooks

vars:
  BINARY_NAME: scai
  DAGGER_GO_MODULE: github.com/sagikazarmark/daggerverse/go@v0.9.0
  DAGGER_GOLANG_MODULE: github.com/purpleclay/daggerverse/golang@v0.5.0
  DAGGER_PRECOMMIT_TF_MODULE: github.com/Smana/daggerverse/pre-commit-tf@pre-commit-tf/v0.1.2

tasks:
  default:
    desc: Default task - build the binary
    cmds:
      - task: build

  build:
    desc: Build the SCIA binary using Dagger
    cmds:
      - |
        dagger call -m {{.DAGGER_GO_MODULE}} \
          with-source --source=. \
          with-module-cache --cache=module-cache \
          with-build-cache --cache=build-cache \
          build \
          export --path={{.BINARY_NAME}}
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.BINARY_NAME}}"

  install:
    desc: Build and install the binary globally
    deps:
      - build
    cmds:
      - go install

  test:
    desc: Run all tests using Dagger
    cmds:
      - |
        dagger call -m {{.DAGGER_GO_MODULE}} \
          with-source --source=. \
          exec --args=go,test,./...,--race,--short
    sources:
      - "**/*.go"
      - go.mod
      - go.sum

  test-verbose:
    desc: Run tests with verbose output
    cmds:
      - |
        dagger call -m {{.DAGGER_GO_MODULE}} \
          with-source --source=. \
          exec --args=go,test,-v,./...

  lint:
    desc: Lint code using golangci-lint via Dagger
    cmds:
      - |
        dagger call -m {{.DAGGER_GO_MODULE}} \
          with-source --source=. \
          exec --args=go,run,github.com/golangci/golangci-lint/cmd/golangci-lint@latest,run,./...

  lint-format:
    desc: Format code using gofumpt via Dagger
    cmds:
      - |
        dagger call -m {{.DAGGER_GO_MODULE}} \
          with-source --source=. \
          exec --args=go,run,mvdan.cc/gofumpt@latest,-l,-w,. \
          directory --path=. \
          export --path=.

  vulncheck:
    desc: Scan for vulnerabilities using govulncheck
    cmds:
      - |
        dagger call -m {{.DAGGER_GO_MODULE}} \
          with-source --source=. \
          exec --args=go,run,golang.org/x/vuln/cmd/govulncheck@latest,./...

  bench:
    desc: Run benchmarks
    cmds:
      - |
        dagger call -m {{.DAGGER_GO_MODULE}} \
          with-source --source=. \
          exec --args=go,test,-bench=.,./...

  clean:
    desc: Clean build artifacts
    cmds:
      - go clean
      - rm -f {{.BINARY_NAME}}

  run-example:
    desc: Run example deployment
    deps:
      - build
    cmds:
      - |
        ./{{.BINARY_NAME}} deploy \
          "Deploy this Flask app on AWS" \
          https://github.com/user/flask-app

  check:
    desc: Run all checks (test, lint, vulncheck)
    cmds:
      - task: test
      - task: lint
      - task: vulncheck

  ci:
    desc: Complete CI pipeline (build, test, lint, vulncheck)
    cmds:
      - task: build
      - task: test
      - task: lint
      - task: vulncheck

  # OpenTofu/Terraform validation tasks
  tofu-validate:
    desc: Validate OpenTofu modules using Dagger pre-commit-tf (Terraform-only hooks)
    cmds:
      - |
        cp .pre-commit-config.yaml .pre-commit-config.yaml.bak
        cp .pre-commit-config-tofu.yaml .pre-commit-config.yaml
        dagger call -m {{.DAGGER_PRECOMMIT_TF_MODULE}} \
          run --dir "." --tf-binary="tofu" || EXIT_CODE=$?
        mv .pre-commit-config.yaml.bak .pre-commit-config.yaml
        exit ${EXIT_CODE:-0}

  mod-version:
    desc: Show Go version from go.mod
    cmds:
      - grep "^go " go.mod | awk '{print $2}'

  # container:
  #   desc: Build container with the SCIA binary (disabled - using binaries only for now)
  #   cmds:
  #     - |
  #       dagger call -m {{.DAGGER_GO_MODULE}} \
  #         with-source --source=. \
  #         with-module-cache --cache=module-cache \
  #         with-build-cache --cache=build-cache \
  #         build \
  #         as-service

  help:
    desc: Show all available tasks
    cmds:
      - task --list
