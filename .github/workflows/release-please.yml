name: Release Please

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      pr: ${{ steps.release.outputs.pr }}
    steps:
      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          # Use PAT if available (recommended), fallback to GITHUB_TOKEN
          # To fix "GitHub Actions is not permitted to create PRs":
          # Option 1: Create PAT with repo scope and add as RELEASE_PLEASE_TOKEN secret
          # Option 2: Go to Settings > Actions > General > Workflow permissions >
          #           Enable "Allow GitHub Actions to create and approve pull requests"
          token: ${{ secrets.RELEASE_PLEASE_TOKEN || secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  build-and-publish:
    name: Build and Publish Release Assets
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created
    permissions:
      contents: write
      packages: write
      security-events: write
    env:
      GO_VERSION: "1.25"
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # GoReleaser needs full git history

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and release with GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
          DOCKER_BUILDKIT: 1

      - name: Run Trivy vulnerability scanner on built image (AMD64)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'ghcr.io/smana/scia:${{ needs.release-please.outputs.version }}-amd64'
          format: 'sarif'
          output: 'trivy-results-amd64.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true

      - name: Run Trivy vulnerability scanner on built image (ARM64)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'ghcr.io/smana/scia:${{ needs.release-please.outputs.version }}-arm64'
          format: 'sarif'
          output: 'trivy-results-arm64.sarif'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true

      - name: Upload Trivy scan results to GitHub Security (AMD64)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-amd64.sarif'
          category: 'trivy-release-amd64'

      - name: Upload Trivy scan results to GitHub Security (ARM64)
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-arm64.sarif'
          category: 'trivy-release-arm64'

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: release-security-scan-results
          path: |
            trivy-results-amd64.sarif
            trivy-results-arm64.sarif
          retention-days: 30
